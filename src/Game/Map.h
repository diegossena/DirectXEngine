#include <string>
#include <vector>
#include "Engine/Window/Size.h"

class Map
{
private:
  std::vector<std::string> oGameMap;
  int oWidth, oHeight;
  float oTileSize;

public:
  // Getters
  std::vector<std::string> &current = Map::oGameMap;
  // Constructor
  Map()
  {
    Map::loadLvL1();
  }
  // Methods
  void loadLvL1()
  {
    Map::oGameMap = {
        "................................................................",
        "................................................................",
        ".......ooooo....................................................",
        ".......ooooo....................................................",
        "........ooo.....................................................",
        ".......................########.................................",
        ".....BB?BBBB?BB.......###..............#.#......................",
        "....................###................#.#......................",
        "...................####.........................................",
        "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG.##############.....########",
        "...................................#.#...............###........",
        "........................############.#............###...........",
        "........................#............#.........###..............",
        "........................#.############......###.................",
        "........................#................###....................",
        "........................#################.......................",
        "................................................................"};
  }
  char getTile(const short &x, const short int &y)
  {
    if (x >= 0 && x < Map::oGameMap[0].size() && y >= 0 && y < Map::oGameMap.size())
      return Map::oGameMap[y][x];
    return ' ';
  }
  RGBA getTileColor(const short &x, const short int &y)
  {
    switch (Map::getTile(x, y))
    {
    case '.':
      return RGBA(52, 235, 213);
    case '#':
      return RGBA(5, 140, 0);
    case 'o':
      return Color::Yellow;
    case '?':
      return RGBA(184, 162, 6);
    case 'G':
      return RGBA(130, 63, 12);
    case 'B':
      return RGBA(130, 63, 12);
    default:
      return Color::White;
    }
  }
};